procedure TForm1.Hete_Rank;
var
  New_Matrix, New_Matrix1, Protein_Sim, QT, Domain_Sim: array of array of double;
  New_Matrix_Domain, New_Matrix_Protein: array of array of integer;
  i, j, k, Match_Num, l, n: integer;
  rd, Temp, a, b, MaxSim, FuncDomain, c, d, standard, Max, Min, temp2: double;
  New_pr, New_newpr, param: array of double;
  s: string;
  f: textfile;
begin


  for i := low(Valid_Proteins) to high(Valid_Proteins) - 1 do
    for j := i + 1 to high(Valid_Proteins) do
    begin
      value2[i][j] := (value2[i][j] - min2) / (max2 - min2);
      value2[j][i] := value2[i][j];
      if Value5[i][j] > 0 then
        ecc[i][j] := strtofloat(edit5.text) + MatrixEdge[Valid_Proteins[i]][Valid_Proteins[j]].second_flag * strtofloat(edit4.text) + MatrixEdge[Valid_Proteins[i]][Valid_Proteins[j]].Flag * (1 - strtofloat(edit4.Text) - strtofloat(edit5.text))
      else
        ecc[i][j] := MatrixEdge[Valid_Proteins[i]][Valid_Proteins[j]].second_flag * strtofloat(edit4.text) + MatrixEdge[Valid_Proteins[i]][Valid_Proteins[j]].Flag * (1 - strtofloat(edit4.Text) - strtofloat(edit5.text));
     // value4[i][j] := (value4[i][j] - min4) / (max4 - min4);

     // value5[i][j] := (value5[i][j] - min5) / (max5 - min5);
     //if value5[i][j]>0 then
     //   value5[i][j]:=1;
     // ecc[i][j]:= Value5[i][j]*strtofloat(edit5.text)+ecc[i][j]*(1-strtofloat(edit5.text)) ;
    //
     // value4[j][i] := value4[i][j];
      value5[j][i] := value5[i][j];
      ecc[j][i] := ecc[i][j];
    end;

  setlength(New_Matrix_Domain, 0);
  setlength(New_Matrix_Domain, Domain.Count); //Domain包含的Protein矩阵
  for i := 0 to Domain.Count - 1 do
  begin
    k := 0;
    for j := 0 to length(Valid_Proteins) - 1 do
      if Matrix_Domain[Valid_Proteins[j]][i] = 1 then
      begin
        setlength(New_Matrix_Domain[i], k + 1);
        New_Matrix_Domain[i][k] := j;
        inc(k);
      end;
  end;

  setlength(New_Matrix_Protein, 0);
  setlength(New_Matrix_Protein, length(Valid_Proteins)); //Protein包含的Domain矩阵
  for i := 0 to length(Valid_Proteins) - 1 do
  begin
    k := 0;
    for j := 0 to Domain.Count - 1 do
      if Matrix_Domain[Valid_Proteins[i]][j] = 1 then
      begin
        setlength(New_Matrix_Protein[i], k + 1);
        New_Matrix_Protein[i][k] := j;
        inc(k);
      end;
  end;

  setlength(New_Matrix1, 0);
  setlength(New_Matrix1, Domain.Count + length(Valid_Proteins));
  for i := 0 to Domain.Count + length(Valid_Proteins) - 1 do
    setlength(New_Matrix1[i], Domain.Count + length(Valid_Proteins));


  setlength(Protein_Sim, length(Valid_Proteins));
  Gauge1.MaxValue := length(Valid_Proteins);
  Gauge1.MinValue := 0;
  Gauge1.Progress := 0;
  for i := 0 to length(Valid_Proteins) - 1 do
  begin
    Gauge1.Progress := Gauge1.Progress + 1;
    setlength(Protein_Sim[i], Domain.Count);
    //-------------------------------------------------------
    for j := 0 to Domain.Count - 1 do
    begin
      MaxSim := 0;
      for k := 0 to length(New_Matrix_Domain[j]) - 1 do
        if MaxSim < ecc[i][j] then
          MaxSim := ecc[i][j];
        //MaxSim := MaxSim + Matrix_Edge[i][New_Matrix_Domain[j][k]][0]; }
      Protein_Sim[i][j] := MaxSim;

    end;
    application.ProcessMessages;
  end;


  Gauge1.MaxValue := length(Valid_Proteins);
  Gauge1.MinValue := 0;
  Gauge1.Progress := 0;
  for i := 0 to length(Valid_Proteins) - 1 do
  begin
    Gauge1.Progress := Gauge1.Progress + 1;
    for j := i + 1 to length(Valid_Proteins) - 1 do
    begin
      Temp := ecc[i][j];

      New_Matrix1[i][j] := Temp;
      New_Matrix1[j][i] := Temp;
    end;
    application.ProcessMessages;
  end;


  Gauge1.MaxValue := Domain.Count;
  Gauge1.MinValue := 0;
  Gauge1.Progress := 0;
  for i := 0 to Domain.Count - 1 do
  begin
    Gauge1.Progress := Gauge1.Progress + 1;
    for j := i + 1 to Domain.Count - 1 do
    begin
      FuncDomain := 0;

      for k := 0 to high(New_Matrix_Domain[i]) do
        FuncDomain := FuncDomain + Protein_Sim[New_Matrix_Domain[i][k]][j];
      for k := 0 to high(New_Matrix_Domain[j]) do
        FuncDomain := FuncDomain + Protein_Sim[New_Matrix_Domain[j][k]][i];

      FuncDomain := FuncDomain / (Domain_frequency[i] + Domain_frequency[j]);
      Temp := FuncDomain;

      New_Matrix1[i + length(Valid_Proteins)][j + length(Valid_Proteins)] := Temp;
      New_Matrix1[j + length(Valid_Proteins)][i + length(Valid_Proteins)] := Temp;
     //  New_Matrix1[i + length(Valid_Proteins)][j + length(Valid_Proteins)]:= Domain_Sim[i][j];
       //New_Matrix1[j + length(Valid_Proteins)][i + length(Valid_Proteins)]:= Domain_Sim[i][j];
    end;
    application.ProcessMessages;
  end;
   //----------------------------------------------------------------------------
  for i := 0 to length(Valid_Proteins) - 1 do
    for j := length(Valid_Proteins) to Domain.Count + length(Valid_Proteins) - 1 do
      New_Matrix1[i][j] := Matrix_second_Domain[i][j - length(Valid_Proteins)];

  for i := length(Valid_Proteins) to Domain.Count + length(Valid_Proteins) - 1 do
    for j := 0 to length(Valid_Proteins) - 1 do
      New_Matrix1[i][j] := Matrix_second_Domain[j][i - length(Valid_Proteins)];



   //d := 0;
  setlength(QT, 0);
  setlength(QT, Domain.Count + length(Valid_Proteins));
  for i := 0 to length(Valid_Proteins) + domain.Count - 1 do
  begin
    setlength(QT[i], Domain.Count + length(Valid_Proteins));
  end;

  for i := 0 to length(Valid_Proteins) - 1 do
  begin
    Temp := 0;
    for j := 0 to length(Valid_Proteins) - 1 do
      Temp := Temp + New_Matrix1[i][j];

    for j := 0 to length(Valid_Proteins) - 1 do
    begin
      if temp = 0 then
        QT[i][j] := 0
      else
        QT[i][j] := New_Matrix1[i][j] / Temp;
    end;
  end;

  for i := 0 to length(Valid_Proteins) - 1 do
  begin
    Temp := 0;
    for j := length(Valid_Proteins) to Domain.Count + length(Valid_Proteins) - 1 do
      Temp := Temp + New_Matrix1[i][j];

    for j := length(Valid_Proteins) to Domain.Count + length(Valid_Proteins) - 1 do
      if Temp <> 0 then
        QT[i][j] := New_Matrix1[i][j] / Temp
      else
        QT[i][j] := 0;
  end;

  for i := length(Valid_Proteins) to Domain.Count + length(Valid_Proteins) - 1 do
  begin
    Temp := 0;
    for j := 0 to length(Valid_Proteins) - 1 do
      Temp := Temp + New_Matrix1[i][j];

    for j := 0 to length(Valid_Proteins) - 1 do
      if Temp <> 0 then
        QT[i][j] := New_Matrix1[i][j] / Temp
      else
        QT[i][j] := 0;
  end;

  for i := length(Valid_Proteins) to Domain.Count + length(Valid_Proteins) - 1 do
  begin
    Temp := 0;
    for j := length(Valid_Proteins) to Domain.Count + length(Valid_Proteins) - 1 do
      Temp := Temp + New_Matrix1[i][j];

    for j := length(Valid_Proteins) to Domain.Count + length(Valid_Proteins) - 1 do
      if temp = 0 then
        QT[i][j] := 0
      else
        QT[i][j] := New_Matrix1[i][j] / Temp;

  end;



  setlength(New_Matrix, length(Valid_Proteins));

  setlength(New_pr, length(Valid_Proteins) + domain.Count);
  setlength(New_newpr, length(Valid_Proteins) + domain.Count);
  setlength(param, length(Valid_Proteins) + domain.Count);

  Gauge1.MaxValue := length(Valid_Proteins);
  Gauge1.MinValue := 0;
  Gauge1.Progress := 0;
  for n := low(Valid_Proteins) to high(Valid_Proteins) do
  begin
    Gauge1.Progress := Gauge1.Progress + 1;
    label1.Caption := 'Walking...' + inttostr(n);
    setlength(New_Matrix[n], length(Valid_Proteins));
    temp := 0;
    for i := 0 to length(Valid_Proteins) - 1 do
    begin
      param[i] := ecc[n][i];
      temp := temp + param[i];
    end;

    for i := 0 to length(Valid_Proteins) - 1 do
    begin
     { if temp <> 0 then
        param[i] := param[i] / temp
      else
        param[i] := 0;   }
      New_newpr[i] := param[i];
      New_pr[i] := 0;
    end;

    temp := 0;
    for i := 0 to domain.Count - 1 do
    begin
      MaxSim := 0;
      for j := 0 to length(Valid_Proteins) - 1 do
        if (Matrix_Domain[Valid_Proteins[j]][i] = 1) and (MaxSim < param[j]) then
          MaxSim := param[j];
       // if (Matrix_Domain[Valid_Proteins[j]][i] = 1) then
        //  MaxSim := MaxSim + param[j];
      param[i + length(Valid_Proteins)] := MaxSim;
      temp := temp + param[i + length(Valid_Proteins)];
    end;

    for i := 0 to domain.Count - 1 do
    begin
    {  if temp <> 0 then
        param[i + length(Valid_Proteins)] := param[i + length(Valid_Proteins)] / temp
      else
        param[i + length(Valid_Proteins)] := 0;   }
      New_newpr[i + length(Valid_Proteins)] := param[i + length(Valid_Proteins)];
      New_pr[i + Nodes.Count] := 0;
    end;

    a := StrToFloat(Edit1.Text);
    standard := 0;
    for i := 0 to length(Valid_Proteins) + domain.Count - 1 do
      standard := standard + abs(New_pr[i] - New_newpr[i]);
    for k := 0 to 19 do
    begin
      Temp := 0;
      for i := 0 to length(Valid_Proteins) + domain.Count - 1 do
        Temp := Temp + abs(New_pr[i] - New_newpr[i]);
      Temp := Temp * power(10, 3);
      if standard = temp then
        break;
      standard := temp;



      for i := 0 to length(Valid_Proteins) - 1 do
        New_pr[i] := New_newpr[i];

      temp2 := 0;
      for i := 0 to length(Valid_Proteins) + domain.Count - 1 do
      begin

        Temp := 0;
        for j := 0 to length(Valid_Proteins) + domain.Count - 1 do
          Temp := Temp + qt[i][j] * New_pr[j];
       // Temp := Temp + New_Matrix[i][j] * New_pr[j];
        New_newpr[i] := (1 - a) * (param[i]) + a * Temp;
        temp2 := temp2 + new_newpr[i];
        application.ProcessMessages;
      end;
      if temp2 = 0 then continue;
      for i := 0 to length(valid_proteins) + domain.Count - 1 do
        new_newpr[i] := new_newpr[i] / temp2;
    end; //for k := 0 to 29 do
    for j := low(Valid_Proteins) to high(Valid_Proteins) do
      New_Matrix[n][j] := New_newpr[j];
    //------------------------------------
    application.ProcessMessages;
  end;

    s := ExtractFilePath(Application.ExeName) + 'Tensor_BioGrid.txt';

  try
    begin
      Assignfile(f, pchar(s));
      rewrite(f);
      for i := low(Valid_Proteins) to high(Valid_Proteins) do
        for j := 0 to high(Valid_Proteins) do
          if New_Matrix[i][j] > 0 then
          begin
            s := Inttostr(i) + #9 + Inttostr(j) + #9 + floattostr(New_Matrix[i][j]);
            Writeln(f, s);
          end;
    end;
  finally
    CloseFile(f);
  end;

end;

procedure TForm1.PHN(Sender: TObject);
var
  i, j, k, n, h, MaxRange, Nums, para, l, Predicted_Num, ipos, selected, Certain_Go_Num, TotalNum, Predict_Functions: integer;
  Temp, Temp2, old_temp, old_Temp2, MaxVlue, Value, Current_Density, In_Density, out_Density, Temp_Density, AUPR, AUROC: double;
  Candidate_Index, Neighbor_Set, Temp_set: array of integer; //候选节点集合
  Candidate_GO: array of integer;
  candidate_protein_score, Go_Scores, GO_Nums: array of double;
  Total_Nums, GO_index: array of integer;
  Rec, Pre: array of double;
  New_Matrix, New_Weight: array of array of double;
  predictedFunctions, s, s1: string;
  f: textfile;
  Recall_TPR, Precision, FPR: array of double;
begin
  Hete_Rank;

  Memo2.Lines.Clear;



  setlength(New_Matrix, length(Valid_Proteins));
  for i := low(Valid_Proteins) to high(Valid_Proteins) do
    setlength(New_Matrix[i], length(Valid_Proteins));
  Gauge1.MaxValue := length(Valid_Proteins);
  Gauge1.MinValue := 0;
  Gauge1.Progress := 0;
    s := ExtractFilePath(Application.ExeName) + 'Tensor_BioGrid.txt';

  Assignfile(f, pchar(s));
  reset(f);
  while not Eof(F) do
  begin
    ReadLn(F, k, n, Temp);
    New_Matrix[k][n] := Temp;
    Gauge1.Progress := k + 1;
    Application.ProcessMessages;
  end;


  if checkbox2.Checked = false then
    para := 1
  else
    para := 267;
  setlength(Total_Nums, para);
  setlength(Precision, para);
  setlength(Recall_TPR, para);
  setlength(FPR, para);
  for l := 0 to high(Total_Nums) do
  begin
    Total_Nums[l] := 0;
    Precision[l] := 0;
    Recall_TPR[l] := 0;
    FPR[l] := 0;
  end;
  Predicted_Num := 0;
  //----------------------------------------------------------------------------
 { s := ExtractFilePath(Application.ExeName) + 'GO_biogrid.txt';
  Assignfile(f, pchar(s));
  rewrite(f); }
  setlength(Protein_list, length(Valid_Proteins));
  for i := low(Valid_Proteins) to high(Valid_Proteins) do
    for j := i + 1 to high(Valid_Proteins) do
    begin

      if New_Matrix[i][j] > 0.001 then
      begin

        setlength(Protein_list[i], length(Protein_list[i]) + 1);
        Protein_list[i][high(Protein_list[i])] := j;

        setlength(Protein_list[j], length(Protein_list[j]) + 1);
        Protein_list[j][high(Protein_list[j])] := i;
      end;
    end;
  //CloseFile(f);
  //----------------------------------------------------------------------------
  Gauge1.MaxValue := length(Valid_Proteins);
  Gauge1.MinValue := 0;
  Gauge1.Progress := 0;

  setlength(GO_nums, Go.Count);
  setlength(GO_scores, Go.Count);
  setlength(Go_index, Go.Count);



  for n := low(Valid_Proteins) to high(Valid_Proteins) do
  begin
    Gauge1.Progress := Gauge1.Progress + 1;
    label1.Caption := 'Predicting...' + inttostr(n);
    if (CheckBox1.Checked = True) and (NodeInfo[Valid_Proteins[n]].Unknown = 0) then continue;
    Inc(Predicted_Num);


    setlength(Candidate_Index, 0);
   // if length(Protein_list[n]) > nodeinfo[Valid_Proteins[n]].degree then
    MaxVlue := 0;
    for i := 0 to high(Protein_list[n]) do
    begin
      if (CheckBox1.Checked = True) and (NodeInfo[Valid_Proteins[Protein_list[n][i]]].Unknown = 1) then continue;

      begin
        if Protein_list[n][i] <> n then
        begin
          setlength(Candidate_Index, length(Candidate_Index) + 1);
          Candidate_Index[high(Candidate_Index)] := Protein_list[n][i];
        end;
        if MaxVlue < New_Matrix[n][Protein_list[n][i]] then
        begin
          MaxVlue := New_Matrix[n][Protein_list[n][i]];
          MaxRange := NodeInfo[Valid_Proteins[Protein_list[n][i]]].GONums;
        end;
      end;

    end;


    Nums := 0;
    for i := 0 to go.Count - 1 do
    begin
      Go_Nums[i] := 0;
      GO_index[i] := i;
      Go_scores[i] := 0;


      for j := 0 to high(Candidate_Index) do
        if Matrix_GO[Valid_Proteins[Candidate_Index[j]]][i] <> 0 then
        begin
          Go_Nums[i] := Go_Nums[i] + 1;
          Go_scores[i] := Go_scores[i] + New_Matrix[n][Candidate_Index[j]];
        end;
      if Go_scores[i] > 0 then
        Nums := Nums + 1;
    end; //for i := 0 to go.Count - 1 do
   // MaxRange := Nums;

    for j := low(Go_scores) to high(Go_scores) - 1 do
      for k := j + 1 to high(Go_scores) do
        if GO_Scores[j] < GO_Scores[k] then
        begin
          temp := GO_Scores[j];
          GO_Scores[j] := GO_Scores[k];
          GO_Scores[k] := temp;
          h := GO_index[j];
          GO_index[j] := GO_index[k];
          GO_index[k] := h;
        end;

    for l := 0 to high(Total_Nums) do
    begin
      Nums := 0;

      if length(Total_Nums) > 1 then
        IPos := l + 1
      else
        IPos := MaxRange;
      for j := 0 to Go.Count - 1 do
      begin
        if Matrix_GO[Valid_Proteins[n]][j] = 0 then
          continue;
        for k := 0 to IPos - 1 do
          if GO_index[k] = j then
          begin
            Inc(Nums);
            break;
          end;
      end;

      if Nums <> 0 then
      begin
        Inc(Total_Nums[l]);
      end;
      if IPos <> 0 then
      begin
        Precision[l] := Precision[l] + 1.0 * Nums / IPos;
        FPR[l] := FPR[l] + 1.0 * (IPos - Nums) / IPos;
      end;
      Recall_TPR[l] := Recall_TPR[l] + 1.0 * Nums / (NodeInfo[Valid_Proteins[n]].GONums);

    end; //for l := 0 to high(Total_Nums1) do
    Memo2.Lines.Add(NodeInfo[Valid_Proteins[n]].Node + #9 + IntToStr(Nums) + #9 + FloatToStr(MaxRange) + #9 + IntToStr(NodeInfo[Valid_Proteins[n]].GONums));


    application.ProcessMessages;
  end; // for n := low(Valid_Proteins) to high(Valid_Proteins) do

  AUPR := 0; AUROC := 0;
  for l := 0 to high(Total_Nums) do
  begin
    Precision[l] := Precision[l] / Predicted_Num;
    Recall_TPR[l] := Recall_TPR[l] / Predicted_Num;
    FPR[l] := FPR[l] / Predicted_Num;
      //S := IntToStr(Total_Nums1[l]) + #9 + Format('%.4f', [Precision1[l]]) + #9 + Format('%.4f', [Recall1[l]]) + #9 + Format('%.4f', [2 * Precision1[l] * Recall1[l] / (Precision1[l] + Recall1[l])]) + #9 + Format('%.3f', [predict_funs1 * 1.0 / bench_funs]) + #9 + IntToStr(TP1[l]) + #9 + IntToStr(FP1[l]) + #9 + 'Zhang';
    S := inttostr(l) + #9 + Format('%.4f', [Recall_TPR[l]]) + #9 + Format('%.4f', [Precision[l]]) + #9 + Format('%.4f', [2 * Precision[l] * Recall_TPR[l] / (Precision[l] + Recall_TPR[l])]) + #9 + Format('%.4f', [FPR[l]]) + #9 + Format('%.4f', [Recall_TPR[l]]) + #9 + 'RWRT';
    if checkbox1.Checked = true then
      s := s + #9 + Copy(button12.Caption, 9, length(button12.Caption) - 8);
    Memo1.Lines.Add(S);
    if (checkbox2.Checked = true) and (l > 0) then //计算曲线面积
    begin
      AUPR := AUPR + (Precision[l] + Precision[l - 1]) * (Recall_TPR[l] - Recall_TPR[l - 1]) * 0.5;
      AUROC := AUROC + (Recall_TPR[l] + Recall_TPR[l - 1]) * (FPR[l] - FPR[l - 1]) * 0.5;
    end;
  end;
 // Memo1.Lines.Add(Format('%.4f', [AUPR]) + #9 + Format('%.4f', [AUROC]) + #9 + 'RWRT');
  Memo2.Lines.SaveToFile('RWRT.txt');
  Button9.Enabled := True;
  setlength(New_Matrix, 0);
end;